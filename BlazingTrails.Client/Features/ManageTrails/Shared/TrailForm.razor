@inject AppState AppState
@using BlazingTrails.Client.State;
@using BlazingTrails.Client.Validation
@using BlazingTrails.ComponentLibrary.Map
@using BlazingTrails.Shared.Features.ManageTrails.Shared

@* Blazor's EditForm component helps building a form with validation. *@
@* Pass the EditContext instance to EditForm we create rather than the model directly. *@
<EditForm EditContext="_editContext" OnValidSubmit="SubmitForm">
    <FluentValidationValidator />

    @*A class that we are using like a component to track the state of the form.*@
    <FormStateTracker />

    <FormSection Title="Basic Details"
                 HelpText="This information is used to identify the trail and can be searched to help hikers find it.">

        <!-- We are using bind-Value because we are binding on a Blazor component's Value property -->
        <FormFieldSet Width="col-6">
            <label for="trailName"
                   class="fw-bold text-secondary col-form-label">Name</label>
            <InputText @bind-Value="_trail.Name"
                       class="form-control"
                       id="trailName" />
            <ValidationMessage For="(() => _trail.Name)" />
        </FormFieldSet>

        <FormFieldSet>
            <label for="trailDescription"
                   class="fw-bold text-secondary col-form-label">Description</label>
            <InputTextArea @bind-Value="_trail.Description"
                           rows="6"
                           class="form-control"
                           id="trailDescription" />
            <ValidationMessage For="(() => _trail.Description)" />
        </FormFieldSet>

        <FormFieldSet Width="col-6">
            <label for="trailLocation"
                   class="fw-bold text-secondary col-form-label">Location</label>
            <InputText @bind-Value="_trail.Location"
                       class="form-control"
                       id="trailLocation" />
            <ValidationMessage For="(() => _trail.Location)" />
        </FormFieldSet>

        @* InputFile doesn't use the bind directive like other input components. Instead, we must handle the OnChange event.' *@
        <FormFieldSet>
            <label for="trailImage" class="fw-bold text-secondary col-form-label">Image</label>

            @if (string.IsNullOrWhiteSpace(_trail.Image))
            {
                <InputFile class="form-control" id="trailImage" accept=".png, .jpg, .jpeg" OnChange="LoadTrailImage" />
            }

            else
            {
                <div class="card bg-dark text-white">
                    <img src="images/@_trail.Image" alt="Image of the trail" />
                    <div class="card-img-overlay">
                        <button class="btn btn-primary btn-sm" @onclick="RemoveTrailImage">Remove</button>
                    </div>
                </div>
            }

        </FormFieldSet>

    </FormSection>

    <FormSection Title="Difficulty"
                 HelpText="Help other hikers out by telling them the length of the trail.">
        <FormFieldSet Width="col-3">
            <label for="trailLength"
                   class="fw-bold text-secondary col-form-label">Length (km)</label>
            <InputNumber @bind-Value="_trail.Length"
                         class="form-control"
                         id="trailLength" />
            <ValidationMessage For="(() => _trail.Length)" />

        </FormFieldSet>

        <FormFieldSet Width="col-5">
            <label for="trailTime" class="fw-bold text-secondary col-form-label">Time</label>
            <InputTime @bind-Value="_trail.TimeInMinutes" id="trailTime" />
            <ValidationMessage For="(() => _trail.TimeInMinutes)" />
        </FormFieldSet>

    </FormSection>

    <FormSection Title="Route"
                 HelpText="Route instructions are a guide for the trail. This helps hikers new to the trail stay on track.">
        <InputRouteMap @bind-Value="_trail.Waypoints" />
        <ValidationMessage For="@(() => _trail.Waypoints)" />
    </FormSection>

    <div class="mt-4 mb-5">
        <div class="row">
            <div class="offset-4 col-8 text-end">
                <button class="btn btn-outline-secondary"
                        type="button"
                        @onclick="(() => _trail = new TrailDto())">
                    Reset
                </button>
                <button class="btn btn-primary"
                        type="submit">
                    Submit
                </button>
            </div>
        </div>
    </div>
</EditForm>

@code {
    // A new instance is created when the component is initialized
    // and assigned to the EditForm's model parameter.
    // Input components in the form will be bound to its properties.
    private TrailDto _trail = new TrailDto();
    private EditContext _editContext = default!;

    // Holds the file data.
    private IBrowserFile? _trailImage;

    // Define an event that passes the data entered in the form to the handler specified by the consuming component.
    // Not EventCallback<T> as we want to manually control when StateHasChanged in the handler.
    [Parameter]
    public Func<TrailDto, IBrowserFile?, Task> OnSubmit { get; set; } = default!;

    // Allows an existing trail to the passed to the form (editing).
    [Parameter]
    public TrailDto? Trail { get; set; }

    // Replaces OnInitialized.
    // Will be called whenever an update happens to the object passed in via the Trail parameter.
    // We need this so we can update or remove the image after SubmitEditTrail handler in the EditTrailPage runs.
    protected override void OnParametersSet()
    {
        // If editing, copy the details into the local _trail field that the form components are bound to.
        if (Trail is not null)
        {
            _trail.Id = Trail.Id;
            _trail.Name = Trail.Name;
            _trail.Description = Trail.Description;
            _trail.Location = Trail.Location;
            _trail.Image = Trail.Image;
            _trail.ImageAction = Trail.ImageAction;
            _trail.Length = Trail.Length;
            _trail.TimeInMinutes = Trail.TimeInMinutes;

            _trail.Waypoints.Clear();
            _trail.Waypoints.AddRange(Trail.Waypoints.Select(wp => new TrailDto.WaypointDto(wp.Latitude, wp.Longitude)));
        }

        else
        {
            // When adding a new trail, attempt to get an existing trail from 'AppState'.
            // If no existing state is present, a new blank model will be returned.
            _trail = AppState.NewTrailState.GetTrail();
        }

        // Having direct access to EditContext allows to manually trigger validation
        // or hook onto events such as OnFieldChanged or OnValidationStateChanged.
        // Create a new EditContext instance for the trail model.
        _editContext = new EditContext(_trail);

        // Configure the EditContext to use our new class provider.
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
    }

    // Will be called by the consuming component to reset the form if required.
    public void ResetForm()
    {
        _trail = new TrailDto();
        _editContext = new EditContext(_trail);
        _editContext.SetFieldCssClassProvider(new BootstrapCssClassProvider());
        _trailImage = null;
        AppState.NewTrailState.ClearTrail();
    }

    // Assign the selected file to the trailImage field.
    private void LoadTrailImage(InputFileChangeEventArgs e)
    {
        _trailImage = e.File;
        _trail.ImageAction = ImageAction.Add;
    }

    private void RemoveTrailImage()
    {
        _trailImage = null;
        _trail.ImageAction = ImageAction.Remove;
    }

    // EditForm's OnValidSubmit will invoke this. Allows the handler to decide how to persist the data from the form.
    private async Task SubmitForm()
        => await OnSubmit(_trail, _trailImage);

}
