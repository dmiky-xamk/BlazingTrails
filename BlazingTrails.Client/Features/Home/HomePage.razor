@*Routable component. Define the route this component is responsible for.*@
@page "/"

@*The an instance from dependency injection.*@
@inject HttpClient Http

@*Set the title displayed in the browser tab.*@
<PageTitle>Blazing Trails</PageTitle>

@if (_trails is null)
{
    <p>Loading trails...</p>
}

else
{
    // Data is passed to component parameters using attributes on the element.
    <TrailDetails Trail="_selectedTrail"/>

    <TrailSearch />

    <div class="grid">
        @foreach (var trail in _trails)
        {
            Console.WriteLine(trail.Id);
            <TrailCard Trail="trail" OnSelected="HandleTrailSelected"/>
        }
    </div>
}

@*
    NOTES:

    OnAfterRender / Async methods:
    On the initial render the firstRender bool will be true.
    The primary use is to perform JavaScript interop and other DOM-related operations, such as focusing an element.
*@

@code {
    private IEnumerable<Trail>? _trails;
    private Trail? _selectedTrail;

    // Run only once in the component's lifetime.
    // Great place to make API calls for initial data.
    protected override async Task OnInitializedAsync()
    {
        // Http.Json methods throw 'HttpRequestException' if non-success code is returned from the server.
        try
        {
            // Get a JSON payload from a static file. Mimics an API call.
            _trails = await Http.GetFromJsonAsync<IEnumerable<Trail>>("trails/trail-data.json");
            Console.WriteLine(_trails);
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"There was a problem loading trail data: {ex.Message}");
            throw;
        }
    }

    // Blazor will automatically call 'StateHasChanged' as the child component
    // defined its event as 'EventCallback' type.
    private void HandleTrailSelected(Trail trail) => _selectedTrail = trail;
}