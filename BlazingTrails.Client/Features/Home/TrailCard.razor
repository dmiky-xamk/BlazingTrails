<div class="card shadow" style="width: 18rem">
    <img src="@Trail.Image" class="card-img-top" alt="@Trail.Name">
    <div class="card-body">
        <h5 class="card-title">@Trail.Name</h5>
        <h6 class="card-subtitle mb-3 text-muted">
            <span class="oi oi-map-marker"></span>
            @Trail.Location
        </h6>
        <div class="d-flex justify-content-between mb-3">
            <span>
                <span class="oi oi-clock me-2"></span>
                @Trail.TimeFormatted
            </span>
            <span>
                <span class="oi oi-infinity me-2"></span>
                @Trail.Length km
            </span>
        </div>
        @* The delegate is invoked, passing in the current trail. *@
        <button class="btn btn-primary" title="View" @onclick="(async () => await OnSelected.InvokeAsync(Trail))">
            <i class="bi bi-binoculars"></i>
        </button>
    </div>
</div>

@code {

    // Pass data into the component via parameters.
    // EditorRequired will show a warning if we try to use the component without the parameter.
    [Parameter, EditorRequired]
    public Trail Trail { get; set; } = default!; // The value won't be null so use null forgiving for cleaner syntax.

    // Events are defined using delegate types of either Action or Func.
    // We can pass the trail back to the parent component.
    // By using EventCallback Blazor will automatically call 'StateHasChanged' on the component that handles the event.
    [Parameter, EditorRequired]
    public EventCallback<Trail> OnSelected { get; set; }
}